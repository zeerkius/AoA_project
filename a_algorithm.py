# -*- coding: utf-8 -*-
"""a* algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qGc3IeXr7-9eFtYmvNxJOpAwV8sWQeMX
"""

import heapq

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    open_set = []
    heapq.heappush(open_set, (heuristic(start, goal), 0, start))

    came_from = {}
    g_score = {start: 0}

    while open_set:
        _, current_g, current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            path.reverse()
            return path

        for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
            neighbor = (current[0] + dx, current[1] + dy)
            x, y = neighbor
            if 0 <= x < rows and 0 <= y < cols and grid[x][y] == 0:
                tentative_g = current_g + 1
                if neighbor not in g_score or tentative_g < g_score[neighbor]:
                    g_score[neighbor] = tentative_g
                    f_score = tentative_g + heuristic(neighbor, goal)
                    heapq.heappush(open_set, (f_score, tentative_g, neighbor))
                    came_from[neighbor] = current

    return None

# ========== COMPACT INPUT MODE ==========

def main():
    print("Enter input in the following format:")
    print("rows cols")
    print("wall_count r1 c1 r2 c2 ...")
    print("start_row start_col")
    print("goal_row goal_col")

    # Example: 4 4\n3 1 0 1 1 3 1\n0 0\n3 3
    rows, cols = map(int, input("Grid size: ").split())

    wall_input = list(map(int, input("Wall count and positions: ").split()))
    wall_count, wall_positions = wall_input[0], wall_input[1:]
    grid = [[0 for _ in range(cols)] for _ in range(rows)]
    for i in range(wall_count):
        r = wall_positions[2*i]
        c = wall_positions[2*i + 1]
        if 0 <= r < rows and 0 <= c < cols:
            grid[r][c] = 1

    start = tuple(map(int, input("Start (row col): ").split()))
    goal = tuple(map(int, input("Goal (row col): ").split()))

    path = a_star(grid, start, goal)

    if path:
        print("Shortest path:", path)
    else:
        print("No path found.")

if __name__ == "__main__":
    main()